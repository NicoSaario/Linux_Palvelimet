# Luo tarvittavat kansiot
New-Item -ItemType Directory -Force -Path backend, uploads

# Luo .env
@"
POSTGRES_USER=myuser
POSTGRES_PASSWORD=salainen
POSTGRES_DB=mydb

INFLUXDB_USERNAME=admin
INFLUXDB_PASSWORD=salainen
INFLUXDB_ORG=example-org
INFLUXDB_BUCKET=example-bucket
INFLUXDB_TOKEN=salainen-token
"@ | Set-Content -Path .env -Encoding UTF8

# docker-compose.yml
@"
services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: \$env:POSTGRES_USER
      POSTGRES_PASSWORD: \$env:POSTGRES_PASSWORD
      POSTGRES_DB: \$env:POSTGRES_DB
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - esp32-net

  adminer:
    image: adminer
    restart: always
    ports:
      - "8081:8080"
    networks:
      - esp32-net

  backend:
    build: ./backend
    restart: always
    volumes:
      - ./uploads:/app/uploads
    ports:
      - "3000:3000"
    networks:
      - esp32-net

  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    restart: always
    ports:
      - "8086:8086"
    networks:
      - esp32-net
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: \$env:INFLUXDB_USERNAME
      DOCKER_INFLUXDB_INIT_PASSWORD: \$env:INFLUXDB_PASSWORD
      DOCKER_INFLUXDB_INIT_ORG: \$env:INFLUXDB_ORG
      DOCKER_INFLUXDB_INIT_BUCKET: \$env:INFLUXDB_BUCKET
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: \$env:INFLUXDB_TOKEN

volumes:
  db_data:
  influxdb-data:
  influxdb-config:

networks:
  esp32-net:
    driver: bridge
"@ | Set-Content -Path docker-compose.yml -Encoding UTF8

# backend/Dockerfile
@"
FROM python:3.11-slim

WORKDIR /app

COPY app.py .

EXPOSE 3000
CMD ["python", "app.py"]
"@ | Set-Content -Path backend/Dockerfile -Encoding UTF8

# backend/app.py
@"
from http.server import SimpleHTTPRequestHandler, HTTPServer

PORT = 3000

class Handler(SimpleHTTPRequestHandler):
    def do_POST(self):
        self.send_response(200)
        self.send_header("Content-Type", "application/json")
        self.end_headers()
        self.wfile.write(b'{ "ok": true, "id": 1 }')

with HTTPServer(("", PORT), Handler) as httpd:
    print(f"Mock backend running on port {PORT}")
    httpd.serve_forever()
"@ | Set-Content -Path backend/app.py -Encoding UTF8

# .gitignore
@"
uploads/
db_data/
influxdb-data/
influxdb-config/
.env
.DS_Store
"@ | Set-Content -Path .gitignore -Encoding UTF8

# README.md
@"
# ESP32 Docker -projekti (mock backend)

Valmis Docker-projekti ESP32 + PostgreSQL + Adminer + InfluxDB testaamiseen.

## Käyttö
docker compose up -d

## Palvelut
- Mock Backend API: http://localhost:3000 (POST palauttaa { ""ok"": true, ""id"": 1 })
- Adminer: http://localhost:8081
- InfluxDB UI: http://localhost:8086

## Adminer kirjautuminen
- System: PostgreSQL
- Server: db
- Username: myuser
- Password: salainen
- Database: mydb

## Testi (curl)
curl -X POST http://localhost:3000
"@ | Set-Content -Path README.md -Encoding UTF8

Write-Host "✅ Kaikki tiedostot luotu! Suorita 'docker compose up -d'"
